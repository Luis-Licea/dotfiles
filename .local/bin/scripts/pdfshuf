#!/usr/bin/env bash

################################################################################
# MIT License
#
# Copyright (c) 2023 Luis David Licea Torres
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################

# pdfshuf - Open a random PDF on a random page.
#
# Add option to open given PDF on a random page.
# Add option to open random PDF on a given page.

get_random_pdf_page() {
    # Get the pdf path.
    local -r pdf_name="$1"

    if [ "$(file --mime --brief "$pdf_name")" == "application/pdf; charset=binary" ]; then
        # Get total number of pages from pdf information.
        local -r pages="$(pdfinfo "$pdf_name" | awk '/Pages:/ { print $2 }')"
    else
        # If PDF is not readable, assume it only has one page.
        local -r pages=1
    fi

    # Get a random page number.
    local -r randomPage="$(shuf --head-count=1 --input-range=1-"$pages")"
    # randomPage=$((RANDOM % pages + 1))

    echo "$randomPage"
}

#######################################
# Return the absolute path to a random PDF.
# Arguments:
#   Optional(string) The path to the directory that will be searched for a
#   random PDF. If a path is not provided, the default Calibre Library path
#   will be used.
#######################################
get_random_pdf_path() {
    local -r searchDirectory="${1:-$HOME/Documents/Calibre Library}"
    readarray -t books < <(find "$searchDirectory" -type f -name "*.pdf")
    local -r arrayLength="${#books[@]}"
    local -r randomIndex=$((RANDOM % arrayLength))
    local -r randomBook="${books[$randomIndex]}"
    echo "$randomBook"
}

main() {
    local -r bookPath="$(get_random_pdf_path "$1")"
    local -r bookPage="$(get_random_pdf_page "$bookPath")"
    setsid --fork zathura "$bookPath" --page="$bookPage"
}

main "$@"
