#!/usr/bin/bash

# Previous Keyboard Layout
# A script that switches to the previous keyboard layout, as opposed to cycling through all of them.

function change_layout() {

  # The n-th language represents some language at index n.
  nthLanguageIndex=$1

  # nth = count % number_of_languages
  nthLanguageIndex=$((nthLanguageIndex))
  #nthLanguageIndex=$((nthLanguageIndex % $(xkblayout-state print %C)))

  # Get language list.
  languageList=$(setxkbmap -query | grep layout | awk '{print $2}')

  # Replace commas with newline characters.
  languageList=$(echo "$languageList" | tr ',' '\n')

  # Create a list using the newline-separated string.
  languageList=($languageList)

  # Get the n-th language.
  nthLanguage=${languageList[nthLanguageIndex]}

  # Move every language greater than the n-th language back by one position.
  # This will overwrite the n-th position.
  position=$nthLanguageIndex
  while [ $position -gt 0 ]; do
    # Overwrite the position with the previous position.
    languageList[$position]=${languageList[$((position - 1))]}

    # Decrease the position.
    position=$((position - 1))
  done

  # Place the n-th language as the first one in the array.
  languageList[0]=$nthLanguage

  # This process is identical as the one above, but instead of languages we
  # are processing language variants.
  # Get language variant for each language in the list.
  languageListVariants=$(setxkbmap -query | grep variant | awk '{print $2}')

  # Replace commas with the number zero and a newline. If the commas are replaced with newline characters, then the variants will not be included in the list.
  # ,e1,,, would be saved as [e1]
  # But with in this way ,e1,,, will be saved as [0, e1, 0, 0, 0]
  languageListVariants=$(echo $languageListVariants | sed 's/,/0\n/g')

  # Create a list using the newline-separated string.
  languageListVariants=($languageListVariants)

  # Get the n-th language variant.
  nthLanguageVariant=${languageListVariants[nthLanguageIndex]}

  # Move every language variant greater than the n-th language back by one position.
  # This will overwrite the n-th position.
  position=$nthLanguageIndex
  while [ $position -gt 0 ]; do
    # Overwrite the position with the previous position.
    languageListVariants[$position]=${languageListVariants[$((position - 1))]}

    # Decrease the position.
    position=$((position - 1))
  done

  # Place the n-th language variant as the first one in the array.
  languageListVariants[0]=$nthLanguageVariant

  # Replace empty spaces with commas.
  languages=$(echo "${languageList[*]}" | tr " ", ",")

  # Replace empty spaces with commas.
  variants=$(echo "${languageListVariants[*]}" | tr " ", ",")

  # Replace the zero values with empty spaces.
  variants=$(echo "$variants" | sed 's/0//g')

  # Print the command.
  echo "setxkbmap $languages -variant $variants"
  setxkbmap "$languages" -variant "$variants"
}

# Read saved time.
saved_time=$(cat time.txt)

# Max time before save.
max_time_before_save=$((saved_time + 1))

# Current time.
current_time=$(date +%s)

# Get count.
count=$(cat count.txt)

echo "Saved time: 0. Max time before save: $((max_time_before_save - saved_time)). Current time: $((current_time - saved_time))."

# If the max time before save is greater than the current time:
# Increase the count.
if [ $max_time_before_save -ge "$current_time" ]; then

  # Increase count.
  count=$(((count + 1) % $(xkblayout-state print %C)))

  # Save count.
  echo $count > count.txt

# Else, save new time, set count to 1, and reorganize the keyboard layout.
else
  # Update the keyboard layout.
  #./update-keyboard-layout $count
  change_layout $count

  # Save count.
  echo 1 > count.txt
fi

xkblayout-state set $count

# Save time.
echo "$current_time" > time.txt
