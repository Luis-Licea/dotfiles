#!/usr/bin/env bash

################################################################################
# MIT License
#
# Copyright (c) 2023 Luis David Licea Torres
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################

dir="$1"
is_verbose=true

flags='s'
while getopts "$flags" option "${@:2}"; do
    case "$option" in
        s) is_verbose=false ;;
        *) echo "Recognized flags: $flags"; exit ;;
    esac
done

# No directory has been provided, use current
if [[ -z "$dir" ]]; then
    dir="$(pwd)"
fi

readarray -t dirs < <(
    find "$dir" -maxdepth 3 -type d -name .git \
    -not -path '*/site-packages/*' \
    -not -path '*/node_modules/*' \
    -not -path '*/deleteme/*' \
)

message() {
    echo -en "\033[0;35m"
    echo "${@}"
    echo -en "\033[0m"
}

warning() {
    echo -en "\033[0;31m"
    echo "${@}"
    echo -en "\033[0m"
}

# Loop all sub-directories
for d in "${dirs[@]}"; do
    is_modified=false
    is_untracked=false
    is_ahead=false

    cd "$d/.." ||  exit

    # Check for modified files
    if git status | grep -q modified; then
        is_modified=true
    fi

    # Check for untracked files
    if git status | grep -q Untracked; then
        is_untracked=true
    fi

    # Check for unpushed changes
    if git status | grep -q 'Your branch is ahead'; then
        is_ahead=true
    fi

    if $is_modified || $is_untracked || $is_ahead || $is_verbose; then
        message "$d"
    fi

    $is_modified && warning "Modified files"
    $is_untracked && warning "Untracked files"
    $is_ahead && warning "Unpushed commit"
    ! $is_modified && ! $is_untracked && ! $is_ahead && $is_verbose &&
        echo "Nothing to commit."

    $is_verbose && echo
    cd - > /dev/null || exit
done
