[
    // vim: filetype=jsonc
    {
        // Go to the terminal when it is visible.
        "key": "cmd+j",
        "command": "terminal.focus",
        // "when": "view.terminal.visible"
        "when": "terminalViewShowing"
    },
    {
        // Leave terminal when it is focused.
        "key": "cmd+k",
        "command": "workbench.action.focusPreviousPart",
        "when": "terminalFocus"
    },
    {
        // Go to the next buffer.
        "key": "cmd+l",
        "command": "workbench.action.nextEditor"
    },
    {
        // Leave sidebar when it is focused.
        "key": "cmd+l",
        "command": "workbench.action.focusNextPart",
        "when": "sideBarFocus"
    },
    {
        // Go to the previous buffer.
        "key": "cmd+h",
        "command": "workbench.action.previousEditor"
    },
    {
        // Leave sidebar when it is focused.
        "key": "cmd+h",
        "command": "workbench.action.focusNextPart",
        "when": "sideBarFocus"
    },
    {
        // Close buffer.
        "key": "cmd+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        // Show open buffers in palette.
        "key": "cmd+o",
        "command": "workbench.action.showEditorsInActiveGroup",
        // "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        // When using autocomplete, use to move down the list.
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        // When using autocomplete, use to move up the list.
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        // When the palette is open, use to move down the list.
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        // When the palette is open, use to move up the list.
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        // Toggle sidebar.
        "key": "cmd+s",
        "command": "workbench.action.toggleSidebarVisibility",

        // Use ctrl+0 repeatedly to close sidebar.
        // "key": "ctrl+0",
        // "command": "workbench.action.toggleSidebarVisibility",
        // "when": "!editorTextFocus"
    },
    {
        // Close sidebar when it is focused.
        "key": "cmd+w",
        "command": "workbench.action.closeSidebar",
        "when": "!editorTextFocus && sideBarFocus"
    },
    {
        // Collapse all folders in sidebar using H.
        "key": "shift+h",
        "command": "workbench.files.action.collapseExplorerFolders",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        // Rename file in sidebar explorer using r.
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        // Delete file in sidebar explorer using x.
        "key": "x",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        // Toggle terminal.
        "key": "cmd+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        // Remove Go to File keybinding because it conflicts with GitUI.
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        // Create new folder in sidebar explorer.
        "key": "f",
        "command": "explorer.newFolder",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        // Create new file in sidebar explorer.
        "key": "n",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        // Format document.
        "key": "cmd+f",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        // Disable because it conflicts with Neovim.
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen",
    },
    {
        // Disable because it conflicts with Neovim.
        "key": "ctrl+k",
        "command": "-extension.vim_ctrl+k",
    },
    {
        // Go one page up.
        "key": "shift+j",
        "command": "cursorPageDown",
        "when": "textInputFocus && !suggestWidgetVisible && neovim.mode != insert"
    },
    {
        // Go one page down.
        "key": "shift+k",
        "when": "textInputFocus && !suggestWidgetVisible && neovim.mode != insert",
        "command": "cursorPageUp",
    },
    // {
    //     // Disable because it conflicts with ctrl+j.
    //     "key": "pagedown",
    //     "when": "textInputFocus",
    //     "command": "-cursorPageDown"
    // },
    // {
    //     // Disable because it conflicts with ctrl+k.
    //     "key": "pageup",
    //     "command": "-cursorPageUp",
    //     "when": "textInputFocus"
    // },

    // Neovim keybindings.
    {
        // Telescope explore files.
        "key": "[space] t e",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.quickOpen",
    },
    {
        // Telescope list matches.
        "key": "[space] t l",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.experimental.quickTextSearch",
    },
    // Neovim: Git
    {
        // Git difference.
        "key": "[space] h d",
        "when": "editorFocus && !isInDiffEditor && !terminalFocus && neovim.mode != insert",
        "command": "git.openChange",
    },
    {
        // Git stage.
        "key": "[space] h s",
        "when": "editorFocus && !terminalFocus && neovim.mode != insert",
        "command": "git.stageSelectedRanges",
    },
    {
        // Git revert.
        "key": "[space] h r",
        "when": "editorFocus && !terminalFocus && neovim.mode != insert",
        "command": "git.revertSelectedRanges",
    },
    {
        // Git unstage.
        "key": "[space] h u",
        "when": "editorFocus && !terminalFocus && neovim.mode != insert",
        "command": "git.unstageSelectedRanges",
    },
    {
        // Git blame-toggle.
        "key": "[space] h b",
        "when": "editorFocus && !terminalFocus && neovim.mode != insert",
        "command": "gitLens.toggleFileBlame",
    },
    {
        // Git next change.
        "key": "[space] ] c",
        "when": "textCompareEditorVisible && isInDiffEditor && neovim.mode != insert",
        "command": "workbench.action.compareEditor.nextChange"
    },
    {
        // Git previous change.
        "key": "[space] [ c",
        "when": "textCompareEditorVisible && isInDiffEditor && neovim.mode != insert",
        "command": "workbench.action.compareEditor.previousChange"
    },
    
    // Spelling.
    {
        // Spelling suggestion next.
        "key": "] s",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "cSpell.goToNextSpellingIssue"
    },
    {
        // Spelling suggestion previous.
        "key": "[ s",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "cSpell.goToPreviousSpellingIssue"
    },
    
    // File operations.
    {
        // Close current editor.
        "key": "[space] q",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        // Save current editor.
        "key": "[space] w",
        "when": "!terminalFocus && neovim.mode != insert && editorTextFocus",
        "command": "workbench.action.files.save"
    },
    
    // Movement.
    {
        "key": "[space] 1",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "[space] 2",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "[space] 3",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "[space] 4",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "[space] 5",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "[space] 6",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "[space] 7",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "[space] 8",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "[space] 9",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "[space] 0",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "[space] [space]",
        "when": "!terminalFocus && neovim.mode != insert && !sideBarFocus && !inQuickOpen && !isSnippetMode && !inDebugMode",
        "command": "workbench.action.navigateBackInNavigationLocations"
    },

    // Window movement.
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+j",
        "when": "!inQuickOpen && !codeActionMenuVisible",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "ctrl+k",
        "when": "!inQuickOpen && !codeActionMenuVisible",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight"
    },

    // QuickOpen navigation.
    {
        "key": "ctrl + j",
        "when": "inQuickOpen",
        "command": "workbench.action.quickOpenSelectNext"
    },
    {
        "key": "ctrl + k",
        "when": "inQuickOpen",
        "command": "workbench.action.quickOpenSelectPrevious"
    },

    // Code Action navigation.
    {
        "key": "ctrl + j",
        "when": "codeActionMenuVisible",
        "command": "selectPrevCodeAction"
    },
    {
        "key": "ctrl + k",
        "when": "codeActionMenuVisible",
        "command": "selectNextCodeAction"
    },

    // Auto-completion menu.
    {
        "key": "ctrl+j",
        "when": "suggestWidgetMultipleSuggestions && !suggestionWidgetVisible && textInputFocus",
        "command": "selectNextSuggestion"
    },
    {
        "key": "ctrl+k",
        "when": "suggestWidgetMultipleSuggestions && !suggestionWidgetVisible && textInputFocus",
        "command": "selectPrevSuggestion"
    },

    // Search Sidebar Widget navigation.
    {
        "key": "ctrl+j",
        "when": "sideBarFocus && activeViewlet == 'workbench.view.search'",
        "command": "search.focus.nextInputBox"
    },
    {
        "key": "ctrl+k",
        "when": "sideBarFocus && activeViewlet == 'workbench.view.search'",
        "command": "search.focus.previousInputBox"
    },

    // Toggling bottom panel.
    {
        "key": "ctrl+i",
        "command": "workbench.action.togglePanel"
    },

    // Toggling sidebar.
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "ctrl+m",
        "command": "workbench.action.toggleSidebarVisibility",
    },

    // Remove ctrl+<number> keybindings.
    {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "-workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+4",
        "command": "-workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "ctrl+5",
        "command": "-workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "ctrl+6",
        "command": "-workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "ctrl+7",
        "command": "-workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "ctrl+8",
        "command": "-workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
    },

    // Map numbers to side bar widgets.
    {
        "key": "ctrl+1",
        "command": "workbench.view.explorer"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.view.search"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+4",
        "command": "workbench.view.debug"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.view.extensions"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.view.extension.project-manager"
    },

    {
        "key": "[space] shift+k",
        "when": "neovim.mode != insert",
        "command": "editor.action.showHover"
    },
]
